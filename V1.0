import random
import streamlit as st

# Initialize the Streamlit app
st.title("Zombie Infection Simulation")

# User input for number of simulations
num_simulations = st.number_input("Number of Simulations", min_value=1, max_value=5000, value=1000)

# Define available grouping options
grouping_options = {
    "Three Groups of 3": [3, 3, 3],
    "One Group of 4, One Group of 5": [4, 5],
    "One Group of 2, One Group of 3, One Group of 4": [2, 3, 4]
}

# User selection for each round's group configuration
round_group_selection = {}
for round_number in range(1, 9):  
    if round_number in [1, 3, 6]:  
        round_group_selection[round_number] = st.selectbox(f"Risk Round {round_number} Grouping", list(grouping_options.keys()))
    elif round_number in [2, 5, 7]:  
        round_group_selection[round_number] = st.selectbox(f"Mission Round {round_number} Grouping", list(grouping_options.keys()))
    elif round_number == 4:  
        round_group_selection[round_number] = "Bunk Round"  

# Function to initialize the game
def initialize_game():
    all_players = [f"Player{i}" for i in range(1, 11)]
    random.shuffle(all_players)

    leader = all_players.pop(0)
    zombie = all_players.pop(0)
    non_leader_players = all_players 

    return leader, zombie, non_leader_players

# Function to form groups based on selection
def form_groups(non_leader_players, zombie, group_choice):
    players_with_zombie = non_leader_players + [zombie]
    random.shuffle(players_with_zombie)

    group_sizes = grouping_options[group_choice]
    groups = []
    start = 0
    for size in group_sizes:
        groups.append(players_with_zombie[start:start + size])
        start += size

    return groups

# Function to run Risk Rounds
def risk_round(round_number, leader, zombie, non_leader_players, infected_players, first_time_infected, infection_rounds, group_choice):
    groups = form_groups(non_leader_players, zombie, group_choice)
    new_infected = None
    healthy_candidates = [player for player in non_leader_players if player not in infected_players]

    if healthy_candidates:
        new_infected = random.choice(healthy_candidates)
        infected_players.add(new_infected)
        first_time_infected.add(new_infected)
        infection_rounds[new_infected] = round_number  

# Function to run Mission Rounds
def mission_round(round_number, leader, zombie, non_leader_players, infected_players, group_choice, add_random_uncertainty=True):
    groups = form_groups(non_leader_players, zombie, group_choice)
    results = {}
    for group in groups:
        actual_infected_count = sum(1 for player in group if player in infected_players)
        reported_infected_count = actual_infected_count + (random.choice([0, 1]) if add_random_uncertainty else 0)
        results[f"Group {group}"] = reported_infected_count
    return results  

# Function for Bunk Round
def bunk_round(leader, zombie, players, infected_players):
    all_players = players + [leader, zombie]
    random.shuffle(all_players)
    pairs = [(all_players[i], all_players[i + 1]) for i in range(0, len(all_players) - 1, 2)]
    
    for p1, p2 in pairs:
        if zombie in (p1, p2) and leader not in (p1, p2):
            infected_players.add(p1 if p1 != zombie else p2)
    
    return pairs  

# Function for Escape Round
def escape_round(leader, zombie, non_leader_players, infected_players, mission_reports):
    safe_groups = [group for group, count in mission_reports.items() if count == 0]
    potential_escapees = set(player for group in safe_groups for player in eval(group))  
    if zombie in potential_escapees:
        potential_escapees.remove(zombie)
    
    escapees = potential_escapees
    left_behind = set(non_leader_players) - escapees
    infected_on_board = [p for p in escapees if p in infected_players]

    if infected_on_board:
        return "Zombies Win", infected_on_board
    elif left_behind:
        return "Zombies Win", ["Healthy player left behind"]
    else:
        return "Humans Win", []

# Run Simulation
if st.button("Run Simulation"):
    total_human_wins = 0
    total_zombie_wins = 0

    for _ in range(num_simulations):
        leader, zombie, non_leader_players = initialize_game()
        infected_players = {zombie}
        first_time_infected = set()
        infection_rounds = {}
        mission_reports = {}

        for round_number in range(1, 9):
            if round_number in [1, 3, 6]:
                risk_round(round_number, leader, zombie, non_leader_players, infected_players, first_time_infected, infection_rounds, round_group_selection[round_number])
            elif round_number in [2, 5, 7]:
                mission_reports.update(mission_round(round_number, leader, zombie, non_leader_players, infected_players, round_group_selection[round_number], add_random_uncertainty=(round_number != 7)))
            elif round_number == 4:
                bunk_round(leader, zombie, non_leader_players, infected_players)
            elif round_number == 8:
                result, details = escape_round(leader, zombie, non_leader_players, infected_players, mission_reports)
                if result == "Humans Win":
                    total_human_wins += 1
                else:
                    total_zombie_wins += 1

    st.write(f"Final Results after {num_simulations} simulations:")
    st.write(f"Humans Win: {total_human_wins} times")
    st.write(f"Zombies Win: {total_zombie_wins} times")


