import random
import sys

class ZombieGameSim:
    def __init__(self, num_players=10, num_rounds=7, trials=1000):
        self.num_players = num_players
        self.num_rounds = num_rounds
        self.trials = trials
        random.seed(42)  # Set deterministic seed for debugging

    def simulate_game(self, strategy, leader_decision):
        players = ["H"] * (self.num_players - 2) + ["Z", "L"]  # One zombie, one leader, rest healthy
        random.shuffle(players)
        zombie_index = players.index("Z")
        leader_index = players.index("L")
        infected_players = set([zombie_index])
        infection_history = {i: 0 for i in range(self.num_players)}

        for round_num in range(1, self.num_rounds + 1):
            groups = strategy(players, infected_players, leader_index, round_num)
            
            if round_num in [1, 3, 6]:  # Risk rounds with 1/9 chance of infection per non-infected member
                for group in groups:
                    if any(p in infected_players for p in group):
                        non_infected = [p for p in group if p not in infected_players and p != leader_index]
                        for p in non_infected:
                            if random.randint(1, 9) == 1:  # Each non-infected has a 1/9 chance
                                infected_players.add(p)
                                infection_history[p] += 1
            
            elif round_num == 4:  # Bunk round, zombie automatically infects one partner unless paired with leader
                for group in groups:
                    if zombie_index in group and leader_index not in group:
                        potential_infectees = [p for p in group if p not in infected_players and p != leader_index]
                        if potential_infectees:
                            new_infected = random.choice(potential_infectees)
                            infected_players.add(new_infected)
                            infection_history[new_infected] += 1
            
            # Track infection status per round
            print(f"Round {round_num}: {len(infected_players)} infected, {self.num_players - len(infected_players)} healthy")

        helicopter_passengers = leader_decision(players, infected_players, leader_index, infection_history)
        
        if infected_players & helicopter_passengers:
            return "Zombie Wins"
        
        healthy_players = {i for i in range(self.num_players) if i not in infected_players and i != leader_index}
        if healthy_players - helicopter_passengers:
            return "Zombie Wins"
        
        return "Players Win"

    def run_simulation(self, strategy, leader_decision):
        results = {"Zombie Wins": 0, "Players Win": 0, "Random Infection Impact": 0}
        try:
            for _ in range(self.trials):
                outcome = self.simulate_game(strategy, leader_decision)
                results[outcome] += 1
            print("Simulation complete")
            print(results)
            sys.stdout.flush()
        except Exception as e:
            print("Error:", e)
            sys.stdout.flush()
        return results

def strategic_grouping(players, infected_players, leader_index, round_num):
    healthy = [i for i in range(len(players)) if i not in infected_players and i != leader_index]
    infected = list(infected_players)
    random.shuffle(healthy)
    random.shuffle(infected)
    groups = []
    
    if round_num in [1, 6]:  # Risk rounds
        group_sizes = [3, 3, 3] if random.random() < 0.5 else [2, 3, 4]
    elif round_num == 4:  # Bunk round
        group_sizes = [2] * (len(healthy) // 2)  # Pairs for bunk round
    else:  # Mission rounds (including round 7)
        group_sizes = [3, 3, 3] if random.random() < 0.5 else [2, 3, 4]  
    
    start = 0
    for size in group_sizes:
        groups.append(healthy[start:start + size])
        start += size
    
    if infected:
        groups.append(infected[:2])  
    
    return groups

def leader_excludes_suspected(players, infected_players, leader_index, infection_history):
    candidates = [i for i in range(len(players)) if i != leader_index]
    sorted_candidates = sorted(candidates, key=lambda x: infection_history[x])
    num_to_exclude = max(2, len(candidates) // 3)  # More dynamic exclusion
    safe_passengers = set(sorted_candidates[:-num_to_exclude])
    return safe_passengers

sim = ZombieGameSim(num_rounds=7)
results_strategic = sim.run_simulation(strategic_grouping, leader_excludes_suspected)
print(results_strategic)
