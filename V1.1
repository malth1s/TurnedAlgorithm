import random

def initialize_game(num_players, seed=None):
    """Initialize the game with a Leader, a Zombie, and other players."""
    if seed is not None:
        random.seed(seed)

    all_players = [f"Player{i}" for i in range(1, num_players + 1)]
    random.shuffle(all_players)

    leader = all_players.pop(0)  # Assign the first player as the leader
    zombie = all_players.pop(0)  # Assign the second player as the zombie
    non_leader_players = all_players  # The remaining players

    return leader, zombie, non_leader_players

def form_groups(non_leader_players, zombie, group_sizes):
    """Form groups based on the selected group sizes."""
    players_with_zombie = non_leader_players + [zombie]
    random.shuffle(players_with_zombie)

    groups = []
    start = 0
    for size in group_sizes:
        groups.append(players_with_zombie[start:start + size])
        start += size

    return groups

def risk_round(round_number, leader, zombie, non_leader_players, infected_players, infection_probability, group_sizes, infection_log):
    """Risk rounds where players in a group with an infected person may become infected."""
    print(f"Risk Round {round_number}")

    groups = form_groups(non_leader_players, zombie, group_sizes)
    new_infected = None

    print(f"Leader: {leader} (immune)")
    print(f"Zombie: {zombie} (Infected)")

    for group in groups:
        print(f"Group: {group}")
        group_has_infection = any(player in infected_players for player in group)

        if group_has_infection:
            healthy_candidates = [player for player in group if player not in infected_players]
            if healthy_candidates:
                for player in healthy_candidates:
                    if random.random() < infection_probability:
                        new_infected = player
                        infected_players.add(player)
                        infection_log[player] = round_number  # Track when player was infected
                        print(f"  ⚠️ {player} was infected this round!")
                        break  # Only one infection per risk round

        for player in group:
            status = "Infected" if player in infected_players else "Healthy"
            print(f"  {player}: {status}")

    print("\n" + "="*30 + "\n")

def mission_round(round_number, leader, zombie, non_leader_players, infected_players, group_sizes):
    """Mission round where players report infection status, with a random infected or clean card added."""
    print(f"Mission Round {round_number}")

    groups = form_groups(non_leader_players, zombie, group_sizes)
    print(f"Leader: {leader} (immune)")
    print(f"Zombie: {zombie} (Infected)")

    mission_history = []

    for group in groups:
        print(f"Group: {group}")

        actual_infected_count = sum(1 for player in group if player in infected_players)
        reported_infected_count = actual_infected_count

        # Add a random fake "infected" or "clean" card to each group
        fake_card = random.choice(["infected", "clean"])
        if fake_card == "infected":
            reported_infected_count += 1
            print(f"  ⚠️ A fake 'Infected' card was added!")
        elif fake_card == "clean":
            reported_infected_count = max(0, reported_infected_count - 1)  # Cannot go below 0
            print(f"  ✅ A fake 'Clean' card was added!")

        print(f"  Infection Reports: {reported_infected_count} player(s) infected (identity unknown)")

        mission_history.append({"group": group, "reported_infected": reported_infected_count})

    print("\n" + "="*30 + "\n")
    return mission_history

def mission_scan(round_number, infected_players, total_players):
    """Mission 8 - Scan: Displays the total number of infected players."""
    print(f"Mission Round {round_number} - Scan")
    print(f"  Total Infected: {len(infected_players)} / {total_players}")
    print("\n" + "="*30 + "\n")

def run_game(settings, seed=None):
    """Runs the entire game based on provided settings."""
    if seed is not None:
        random.seed(seed)

    # Initialize the game
    leader, zombie, non_leader_players = initialize_game(settings["num_players"], seed)
    infected_players = {zombie}
    infection_log = {zombie: 0}  # Track which round each player was infected
    mission_history = []

    print(f"\nGame Start! Leader: {leader}, Zombie: {zombie}\n")

    # Play rounds
    for round_number in range(1, settings["max_rounds"] + 1):
        group_sizes = settings["round_group_selection"].get(round_number, [])

        if round_number in settings["risk_rounds"]:
            risk_round(round_number, leader, zombie, non_leader_players, infected_players, settings["infection_probability"], group_sizes, infection_log)
        elif round_number in settings["mission_rounds"]:
            if round_number == 8:  # Special "Scan" round
                mission_scan(round_number, infected_players, settings["num_players"])
            else:
                mission_data = mission_round(round_number, leader, zombie, non_leader_players, infected_players, group_sizes)
                mission_history.extend(mission_data)

    # Display Infection Summary
    print("\nFinal Infection Summary:")
    for player, round_infected in infection_log.items():
        print(f"  {player} was infected in Round {round_infected}")

# ========================== SETTINGS ==========================

game_settings = {
    "num_players": 10,
    "max_rounds": 8,
    "infection_probability": 0.3,  # Probability of infection per risk round
    "risk_rounds": [1, 3, 6],
    "mission_rounds": [2, 5, 7, 8],  # Mission 8 is Scan
    "round_group_selection": {
        1: [3, 3, 3],
        2: [4, 5],
        3: [2, 3, 4],
        4: [2, 2, 2, 2, 2],  
        5: [3, 3, 3],
        6: [4, 5],
        7: [5, 5],
        8: [10],  # Mission 8 - Scan (all together)
    }
}

# Run the game
seed_value = 42  # Set a deterministic seed for reproducibility
run_game(game_settings, seed_value)
